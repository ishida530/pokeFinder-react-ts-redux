{"version":3,"sources":["App.tsx","actions/PokemonAction.ts","actions/PokemonActionTypes.ts","reportWebVitals.ts","reducers/PokemonReducers.ts","reducers/RootReducer.ts","Store.ts","index.tsx"],"names":["App","dispatch","useDispatch","useState","pokemonName","setPokemonName","pokemonState","useSelector","state","pokemon","console","log","className","type","onChange","event","target","value","onClick","a","axios","get","res","payload","data","src","sprites","front_default","alt","abilities","map","ability","name","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","defaultState","loading","pokemonReducer","action","RootReducer","combineReducers","Store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","store","document","getElementById"],"mappings":"mQAiCeA,MA3Bf,WACE,IAAMC,EAAWC,cACjB,EAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACMC,EAAeC,aAAY,SAACC,GAAD,OAAsBA,EAAMC,WAQ7D,OADAC,QAAQC,IAAI,iBAAkBL,GAE5B,sBAAKM,UAAU,MAAf,UACE,uBAAOC,KAAK,OAAOC,SATF,SAACC,GACpBV,EAAeU,EAAMC,OAAOC,UAS1B,wBAAQC,QAPS,WCTG,IAACT,EDUvBR,GCVuBQ,EDUHL,ECVE,uCAAqB,WAAOH,GAAP,eAAAkB,EAAA,sEAEvClB,EAAU,CACNY,KCPmB,oBDIgB,SAMrBO,IAAMC,IAAN,4CAA+CZ,IAN1B,OAMjCa,EANiC,OAQvCrB,EAAS,CACLY,KCXmB,kBDYnBU,QAASD,EAAIE,OAVsB,gDAavCvB,EAAU,CACNY,KCjBgB,iBDGmB,yDAArB,yDDgBpB,qBACLP,EAAaG,SACZ,gCACQ,qBAAKgB,IAAKnB,EAAaG,QAAQiB,QAAQC,cAAeC,IAAI,KAC/DtB,EAAaG,QAAQoB,UAAUC,KAAI,SAAAC,GAClC,OAAO,4BAAIA,EAAQA,QAAQC,iBGXlBC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCHRQ,EAA8B,CAChCC,SAAS,GA0BEC,EAxBQ,WAAwE,IAAvEpC,EAAsE,uDAA/CkC,EAAcG,EAAiC,uCAC1F,OAAQA,EAAOhC,MACX,IAAK,eACD,MAAO,CACH8B,SAAS,GAEjB,IAAK,kBACD,MAAO,CACHA,SAAS,GAEjB,IAAK,kBACD,MAAO,CACHA,SAAS,EACTlC,QAAQoC,EAAOtB,SAIvB,QACI,OAAOf,ICpBJsC,EAJKC,0BAAgB,CAClCtC,QAASmC,I,gBCMII,EAJHC,sBAAYH,EAAYI,8BAAoBC,0BAAgBC,OCGxEC,IAASC,OACP,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BxB,M","file":"static/js/main.9e51382a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootStore } from './Store';\nimport { GetPokemon } from './actions/PokemonAction';\n\nfunction App() {\n  const dispatch = useDispatch()\n  const [pokemonName, setPokemonName] = useState(\"\");\n  const pokemonState = useSelector((state: RootStore) => state.pokemon)\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setPokemonName(event.target.value)\n  }\n  const handleSubmit = () => {\n    dispatch(GetPokemon(pokemonName))\n  }\n  console.log('pokemon state:', pokemonState)\n  return (\n    <div className=\"App\">\n      <input type=\"text\" onChange={handleChange} />\n      <button onClick={ handleSubmit} > Search</button>\n{pokemonState.pokemon && (\n  <div>\n          <img src={pokemonState.pokemon.sprites.front_default} alt=\"\"/>\n    {pokemonState.pokemon.abilities.map(ability=>{\n      return <p>{ability.ability.name}</p>\n    })}\n  </div>\n)}\n    </div>\n  );\n}\n\nexport default App;\n","import { Dispatch } from \"redux\"\r\nimport { PokemonDispatchTypes, POKEMON_SUCCESS, POKEMON_FAIL, POKEMON_LOADING } from \"./PokemonActionTypes\"\r\nimport axios from \"axios\";\r\n\r\nexport const GetPokemon = (pokemon: string) => async (dispatch: Dispatch<PokemonDispatchTypes>) => {\r\n    try {\r\n        dispatch( {\r\n            type: POKEMON_LOADING\r\n        })\r\n\r\n        const res = await axios.get(`https://pokeapi.co/api/v2/pokemon/${pokemon}`);\r\n\r\n        dispatch({\r\n            type: POKEMON_SUCCESS,\r\n            payload: res.data\r\n        })\r\n    } catch (e) {\r\n        dispatch( {\r\n            type: POKEMON_FAIL\r\n        })\r\n\r\n    }\r\n};","export const POKEMON_LOADING = \"POKEMON_LOADING\";\r\nexport const POKEMON_FAIL = \"POKEMON_FAIL\";\r\nexport const POKEMON_SUCCESS = \"POKEMON_SUCCESS\";\r\n\r\nexport type PokemonType = {\r\n  abilities: PokemonAbility[],\r\n  sprites: PokemonSprites,\r\n  stats: PokemonStat[]\r\n}\r\n\r\nexport type PokemonAbility = {\r\n    ability: {\r\n        name: string;\r\n        url: string;\r\n    }\r\n}\r\nexport type PokemonSprites = {\r\n    front_default: string\r\n  }\r\nexport type PokemonStat = {\r\n    base_stat: number,\r\n    stat: {\r\n        name: string\r\n    }\r\n}\r\nexport interface PokemonLoading {\r\n    type: typeof POKEMON_LOADING\r\n}\r\nexport interface PokemonFail {\r\n    type: typeof POKEMON_FAIL\r\n}\r\nexport interface PokemonSuccess {\r\n    type: typeof POKEMON_SUCCESS\r\n    payload:PokemonType\r\n}\r\n\r\nexport type PokemonDispatchTypes= PokemonLoading | PokemonFail | PokemonSuccess\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { PokemonDispatchTypes, PokemonType, POKEMON_SUCCESS, POKEMON_FAIL, POKEMON_LOADING } from \"../actions/PokemonActionTypes\"\r\ninterface DefaultStateI {\r\n    loading: boolean,\r\n    pokemon?: PokemonType\r\n}\r\n\r\nconst defaultState: DefaultStateI = {\r\n    loading: false\r\n}\r\nconst pokemonReducer = (state: DefaultStateI = defaultState, action: PokemonDispatchTypes) => {\r\n    switch (action.type) {\r\n        case \"POKEMON_FAIL\":\r\n            return {\r\n                loading: false,\r\n            }\r\n        case \"POKEMON_LOADING\":\r\n            return {\r\n                loading: true,\r\n            }\r\n        case \"POKEMON_SUCCESS\":\r\n            return {\r\n                loading: false,\r\n                pokemon:action.payload\r\n            }\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\n\r\n\r\nexport default pokemonReducer","import {combineReducers} from \"redux\";\r\nimport pokemonReducer from \"./PokemonReducers\";\r\n\r\nconst RootReducer = combineReducers({\r\n  pokemon: pokemonReducer\r\n});\r\n\r\nexport default RootReducer","import { createStore,applyMiddleware} from 'redux'\r\nimport RootReducer from './reducers/RootReducer';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\n\r\n\r\nconst Store=createStore(RootReducer,composeWithDevTools(applyMiddleware(thunk)));\r\n\r\n\r\nexport type RootStore=ReturnType <typeof RootReducer>\r\nexport default Store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './Store';\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider >,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}